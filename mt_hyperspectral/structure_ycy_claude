<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HSI Model Architecture</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5em;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .network-diagram {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            margin: 20px 0;
        }
        
        .layer {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            min-width: 300px;
        }
        
        .layer:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        .input-layer {
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
        }
        
        .embedding-layer {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        }
        
        .encoder-layer {
            background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
        }
        
        .pooling-layer {
            background: linear-gradient(135deg, #c3cfe2 0%, #c3cfe2 100%);
        }
        
        .decoder-layer {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .output-layer {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
        }
        
        .layer-title {
            font-weight: bold;
            font-size: 1.2em;
            margin-bottom: 10px;
        }
        
        .layer-details {
            font-size: 0.9em;
            text-align: center;
            line-height: 1.4;
        }
        
        .arrow {
            font-size: 2em;
            color: #666;
            margin: 10px 0;
            animation: bounce 2s infinite;
        }
        
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-10px);
            }
            60% {
                transform: translateY(-5px);
            }
        }
        
        .encoder-block {
            display: flex;
            justify-content: space-around;
            gap: 15px;
            margin-top: 10px;
            flex-wrap: wrap;
        }
        
        .sub-component {
            background: rgba(255,255,255,0.3);
            padding: 8px 12px;
            border-radius: 5px;
            font-size: 0.8em;
            margin: 2px;
        }
        
        .parameters {
            background: rgba(0,0,0,0.1);
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
            font-size: 0.8em;
            color: #555;
        }
        
        .shape-info {
            font-weight: bold;
            color: #e74c3c;
            margin-top: 5px;
        }
        
        .side-by-side {
            display: flex;
            gap: 20px;
            justify-content: center;
            align-items: stretch;
            flex-wrap: wrap;
        }
        
        .vit-encoder-detail {
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            max-width: 500px;
        }
        
        .attention-flow {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin: 10px 0;
        }
        
        .attention-step {
            background: rgba(255,255,255,0.4);
            padding: 8px;
            border-radius: 5px;
            font-size: 0.85em;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>HSI Model Architecture</h1>
        
        <div class="network-diagram">
            <!-- Input -->
            <div class="layer input-layer">
                <div class="layer-title">Input Hyperspectral Image</div>
                <div class="layer-details">
                    Shape: [B, C, H, W]<br>
                    Default: [B, 278, H, W]<br>
                    <em>B=batch, C=spectral bands, H×W=spatial dimensions</em>
                </div>
                <div class="shape-info">Max supported: 64×64 spatial</div>
            </div>
            
            <div class="arrow">↓</div>
            
            <!-- Reshape & Position Embedding -->
            <div class="layer embedding-layer">
                <div class="layer-title">Reshape + Positional Embedding</div>
                <div class="layer-details">
                    1. Permute: [B, C, H, W] → [B, H, W, C]<br>
                    2. Flatten: [B, H, W, C] → [B, H×W, C]<br>
                    3. Add learnable pos_embedding: [1, H×W, C]
                </div>
                <div class="shape-info">Output: [B, N, C] where N = H×W</div>
            </div>
            
            <div class="arrow">↓</div>
            
            <!-- ViT Encoder Blocks -->
            <div class="layer encoder-layer">
                <div class="layer-title">ViT Encoder Blocks (×3 layers)</div>
                <div class="layer-details">
                    Each block contains:
                </div>
                <div class="encoder-block">
                    <div class="sub-component">LayerNorm</div>
                    <div class="sub-component">Multi-Head Attention</div>
                    <div class="sub-component">Dropout</div>
                    <div class="sub-component">Residual Connection</div>
                </div>
                <div class="encoder-block">
                    <div class="sub-component">LayerNorm</div>
                    <div class="sub-component">MLP (4x expansion)</div>
                    <div class="sub-component">Residual Connection</div>
                </div>
                <div class="parameters">
                    num_heads=1, mlp_ratio=4.0, dropout=0.0
                </div>
                <div class="shape-info">Shape maintained: [B, N, C]</div>
            </div>
            
            <div class="arrow">↓</div>
            
            <!-- Global Average Pooling -->
            <div class="layer pooling-layer">
                <div class="layer-title">Global Average Pooling</div>
                <div class="layer-details">
                    Mean across token dimension<br>
                    torch.mean(x, dim=1)
                </div>
                <div class="shape-info">[B, N, C] → [B, C]</div>
            </div>
            
            <div class="arrow">↓</div>
            
            <!-- Decoder -->
            <div class="layer decoder-layer">
                <div class="layer-title">3-Layer MLP Decoder</div>
                <div class="layer-details">
                    FC1: [C, C] + ReLU<br>
                    FC2: [C, C] + ReLU<br>
                    FC3: [C, num_tasks]
                </div>
                <div class="parameters">
                    input_size=278 (band_num)<br>
                    output_size=5 (num_tasks)
                </div>
                <div class="shape-info">[B, C] → [B, num_tasks]</div>
            </div>
            
            <div class="arrow">↓</div>
            
            <!-- Output -->
            <div class="layer output-layer">
                <div class="layer-title">Output Predictions</div>
                <div class="layer-details">
                    Multi-task predictions<br>
                    Shape: [B, 5]
                </div>
                <div class="shape-info">5 different task outputs per sample</div>
            </div>
        </div>
        
        <!-- Detailed ViT Encoder Block -->
        <div class="vit-encoder-detail">
            <h2 style="text-align: center; margin-bottom: 20px; color: #333;">ViT Encoder Block Detail</h2>
            <div class="attention-flow">
                <div class="attention-step">
                    <strong>Branch 1 (Self-Attention):</strong><br>
                    Input → LayerNorm → Multi-Head Attention → Dropout → Add Residual
                </div>
                <div class="attention-step">
                    <strong>Branch 2 (MLP):</strong><br>
                    Previous Output → LayerNorm → Linear(dim→4×dim) → GELU → Dropout → Linear(4×dim→dim) → Dropout → Add Residual
                </div>
                <div class="attention-step">
                    <strong>Self-Attention Details:</strong><br>
                    • Query, Key, Value all come from the same input<br>
                    • embed_dim=278, num_heads=1<br>
                    • Enables spatial-spectral feature interaction
                </div>
            </div>
        </div>
        
        <!-- Model Parameters Summary -->
        <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; margin-top: 20px;">
            <h3 style="color: #333; text-align: center;">Model Configuration</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
                <div><strong>Spectral Bands:</strong> 278</div>
                <div><strong>Output Tasks:</strong> 5</div>
                <div><strong>Encoder Layers:</strong> 3</div>
                <div><strong>Attention Heads:</strong> 1</div>
                <div><strong>MLP Ratio:</strong> 4.0</div>
                <div><strong>Max Spatial Size:</strong> 64×64</div>
            </div>
        </div>
    </div>
</body>
</html>